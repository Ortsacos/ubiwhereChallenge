package main

import (
	"fmt"
	"os"
	"os/exec"
	"strconv"
	"time"
)

// Author: Miguel Vieira
// Date:   14/02/2020

/* Based on the previous requirements, develop a Go application that
implements the following features:
	- Collect CPU, RAM each second from the operating system and
store it in a local database;
	- Create a simulator for the external device, which must
generate random data samples. Each sample must be
composed by 4 variables (for instance, 4 integers).
	- Collect samples (each second) generated by the previously
mentioned simulator and store them in local database.
	- Provide an interface through the console allowing the
following commands:
		○ Get last n metrics for all variables
		○ Get last n metrics for one or more variables
		○ Get an average of the value of one or more variables
*/

type SensorValues struct {
	values []int64
}

var sens []SensorValues

type CollectedValues struct {
	sensors []SensorValues
	cpu     []float64
	ram     []float64
}

var clValues CollectedValues
var opDone chan bool
var displayDuration int

func main() {

	// check and read input arguments
	if len(os.Args) > 1 {

		i, err := strconv.Atoi(os.Args[1])
		if err != nil {
			fmt.Println("invalid argument - positive integer")
		}
		if i < 0 {
			fmt.Println("invalid argument - positive integer")
		}
		displayDuration = i

	} else {
		displayDuration = 10
	}

	// clear terminal to present the MENU
	cmd := exec.Command("clear")
	cmd.Stdout = os.Stdout
	cmd.Run()

	time.Sleep(10 * time.Millisecond)

	fmt.Println("Ubiwhere application - v.1")
	// launch data harvast
	fmt.Println("Starting collecting data")
	go dataHarvast()

	go mainMenu()

	// go go and go
	for {
		time.Sleep(100 * time.Millisecond)
	}

}

// thread for data harvesting
func dataHarvast() {
	for {
		time.Sleep(1 * time.Second)
		dataCare()
		//fmt.Println(clValues)
	}
}

/*	function mainMenu is responsable to present a UI
	This menu has the following option:
		a) Get last n metrics for all variables
		b) Get last n metrics for one or more variables
		c) Get an average of the value of one or more variables
*/
func mainMenu() {
	var s string
	var c, f int

	for {
		// present the menu
		fmt.Println("Values display duration set to 10 seconds by default")
		fmt.Println("To change this value, start the application with an argmunent")
		fmt.Println("ex: ./ubiwhere 30")
		fmt.Println()
		fmt.Println("Main Menu:")
		fmt.Println("a) Get last n metrics for all variables")
		fmt.Println("b) Get last n metrics for one or more variables")
		fmt.Println("c) Get an average of the value of one or more variables")
		fmt.Println()
		fmt.Print("Option: ")
		fmt.Scanf("%s", &s)
		switch s {
		//OPTION  A
		case "a":
			fmt.Println()
			fmt.Print("Present the number of values: ")
			fmt.Scan(&c)
			printValues(c, 1, 0)
			// time of diplaying before clear is controlled by diplayDuration
			// This variable can be changed when the app is executed
			// default value is 10 seconds
			time.Sleep(time.Duration(displayDuration) * time.Second)
			break
		case "b":
			//OPTION  B
			fmt.Println()
			fmt.Println("Which variable do you want?")
			fmt.Println("1) CPU")
			fmt.Println("2) RAM")
			fmt.Println("3) Sensor 1")
			fmt.Println("4) Sensor 2")
			fmt.Println("5) Sensor 3")
			fmt.Println("6) Sensor 4")
			fmt.Println("Press ENTER to continue")
			fmt.Scan(&c)
			switch c {
			case 1:
				fmt.Println()
				fmt.Print("Present the number of CPU values: ")
				fmt.Scan(&f)
				printValues(f, 2, c)
				// time of diplaying before clear is controlled by diplayDuration
				// This variable can be changed when the app is executed
				// default value is 10 seconds
				time.Sleep(time.Duration(displayDuration) * time.Second)
				break
			case 2:
				fmt.Println()
				fmt.Print("Present the number of RAM values: ")
				fmt.Scan(&f)
				printValues(f, 2, c)

				time.Sleep(time.Duration(displayDuration) * time.Second)
				break
			case 3:
				fmt.Println()
				fmt.Print("Present the number of Sensor 1 values: ")
				fmt.Scan(&f)
				printValues(f, 2, c)

				time.Sleep(time.Duration(displayDuration) * time.Second)
				break
			case 4:
				fmt.Println()
				fmt.Print("Present the number of Sensor 2 values: ")
				fmt.Scan(&f)
				printValues(f, 2, c)

				time.Sleep(time.Duration(displayDuration) * time.Second)
				break
			case 5:
				fmt.Println()
				fmt.Print("Present the number of Sensor 3 values: ")
				fmt.Scan(&f)
				printValues(f, 2, c)

				time.Sleep(time.Duration(displayDuration) * time.Second)
				break
			case 6:
				fmt.Println()
				fmt.Print("Present the number of Sensor 4 values: ")
				fmt.Scan(&f)
				printValues(f, 2, c)

				time.Sleep(time.Duration(displayDuration) * time.Second)
				break
			case 0:
				break
			default:
				fmt.Println("Invalid option")
				break
			}
			break
		case "c":
			//OPTION  C
			fmt.Println()
			fmt.Println("Which variable do you want the average?")
			fmt.Println("1) CPU")
			fmt.Println("2) RAM")
			fmt.Println("3) Sensor 1")
			fmt.Println("4) Sensor 2")
			fmt.Println("5) Sensor 3")
			fmt.Println("6) Sensor 4")
			fmt.Println("0) Back")
			fmt.Scan(&c)
		opC:
			switch c {
			case 1:
				printValues(f, 3, c)
				// time of diplaying before clear is controlled by diplayDuration
				// This variable can be changed when the app is executed
				// default value is 10 seconds
				time.Sleep(time.Duration(displayDuration) * time.Second)
				break opC
			case 2:
				printValues(f, 3, c)

				time.Sleep(time.Duration(displayDuration) * time.Second)
				break opC
			case 3:
				printValues(f, 3, c)

				time.Sleep(time.Duration(displayDuration) * time.Second)
				break opC
			case 4:
				printValues(f, 3, c)

				time.Sleep(time.Duration(displayDuration) * time.Second)
				break opC
			case 5:
				printValues(f, 3, c)

				time.Sleep(time.Duration(displayDuration) * time.Second)
				break opC
			case 6:
				printValues(f, 3, c)

				time.Sleep(time.Duration(displayDuration) * time.Second)
				break opC
			case 0:
				break
			default:
				fmt.Println("Invalid option")
				break
			}
			break
		default:
			fmt.Println("Invalid option")
			break

		}
		// clear terminal to present the MENU
		cmd := exec.Command("clear")
		cmd.Stdout = os.Stdout
		cmd.Run()

		time.Sleep(10 * time.Millisecond)
	}
}
